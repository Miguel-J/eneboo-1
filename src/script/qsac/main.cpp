/***************************************************************************
main.cpp
-------------------
begin                : 10/11/2007
copyright            : (C) 2003-2007 by InfoSiAL S.L.
email                : mail@infosial.com
***************************************************************************/ 
/***************************************************************************
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; version 2 of the License.               *
 ***************************************************************************/ 
/***************************************************************************
   Este  programa es software libre. Puede redistribuirlo y/o modificarlo
   bajo  los  términos  de  la  Licencia  Pública General de GNU   en  su
   versión 2, publicada  por  la  Free  Software Foundation.
 ***************************************************************************/

#include <qslexer.h>
#include <qserrors.h>

#include <AQCore/AQConfig.h>
#include <AQScript/AQCompilerQSA.h>

#include <QFile>
#include <QTextStream>
#include <QDataStream>

#include <errno.h>

static void printUsage()
{
  fprintf( stderr, "ECMA-Script(QSA/JavaScript) bytecode compiler for AbanQ."
           "\n(c) 2003-2008 InfoSiAL S.L.\n\n"
           "Usage:\n"
           "    qsac [options] script-src.qs [-qso script-bytecode.qso]\n"
           "Options:\n"
           "    -help\n"
           "           Display this information and exit\n"
           "    -version\n"
           "           Display the version of qsac and exit\n" );
}

int main( int argc, char **argv )
{
  QString outputFile;
  int numFiles = 0;
  int i;

  for ( i = 1; i < argc; i++ ) {
    if ( qstrcmp( argv[ i ], "-version" ) == 0 ) {
      fprintf( stderr, "qsac version %s\n", QString( AQVERSION ).toLatin1().constData() );
      return 0;
    } else if ( qstrcmp( argv[ i ], "-qso" ) == 0 ) {
      if ( i == argc - 1 ) {
        printUsage();
        return 1;
      } else {
        i++;
        outputFile = QString::fromLatin1( argv[ i ] );
        argv[ i ][ 0 ] = '-';
      }
    } else if ( qstrcmp( argv[ i ], "-help" ) == 0 ) {
      printUsage();
      return 0;
    } else if ( argv[ i ][ 0 ] == '-' ) {
      printUsage();
      return 1;
    } else {
      numFiles++;
    }
  }

  if ( numFiles == 0 ) {
    printUsage();
    return 1;
  }

  for ( i = 1; i < argc; i++ ) {
    if ( argv[ i ][ 0 ] == '-' )
      continue;

    QFile f( QString::fromLatin1( argv[ i ] ) );
    if ( !f.open( QIODevice::ReadOnly ) ) {
#if defined(_MSC_VER) && _MSC_VER >= 1400
      char buf[ 100 ];
      strerror_s( buf, sizeof( buf ), errno );
      fprintf( stderr,
               "qsac error: Cannot open file '%s': %s\n", argv[ i ],
               buf );
#else
      fprintf( stderr,
               "qsac error: Cannot open file '%s': %s\n", argv[ i ],
               strerror( errno ) );
#endif
      return 1;
    }

    QTextStream t( &f );
    QString fullText = t.readAll();
    f.close();

    if ( outputFile.isEmpty() )
      outputFile = QString::fromLatin1( argv[ i ] ) + ".qso";

    QSLexer lex;
    AQCompilerQSA qsac( &lex );
    QByteArray byteCode( qsac.byteCode( fullText ) );

    if ( qsac.errorType() != QSErrNoError ) {
      for ( int i = 0; i < qsac.errorLines().size(); ++i )
        fprintf( stderr, "Line %d : %s\n",
                 qsac.errorLines().at( i ), qsac.errorMessages().at( i ).toLatin1().constData() );
      return qsac.errorType();
    }

    QFile file( outputFile );
    if ( !file.open( QIODevice::WriteOnly ) ) {
#if defined(_MSC_VER) && _MSC_VER >= 1400
      char buf[ 100 ];
      strerror_s( buf, sizeof( buf ), errno );
      fprintf( stderr,
               "qsac error: Cannot open output file '%s': %s\n", outputFile.toLatin1().constData(),
               buf );
#else
      fprintf( stderr,
               "qsac error: Cannot open output file '%s': %s\n", outputFile.toLatin1().constData(),
               strerror( errno ) );
#endif
      return 1;
    }

    QDataStream out( &file );
    out << byteCode;
    file.close();

    break;
  }

  fprintf( stderr, "Generated bytecode in %s\n", outputFile.toLatin1().constData() );

  return 0;
}
